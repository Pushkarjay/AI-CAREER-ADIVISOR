name: Deploy AI Career Advisor (Reference Example)

# This is a reference example of the deployment workflow
# Your existing .github/workflows/deploy.yml is already configured correctly
# This file shows best practices and additional options

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-south1
  SERVICE_NAME: backend-service

jobs:
  # Optional: Run tests first
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: backend
        run: |
          pip install -r requirements.txt
          
      - name: Run tests
        working-directory: backend
        run: |
          pytest tests/ --verbose

  # Backend deployment to Cloud Run
  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy $SERVICE_NAME \
            --source ./backend \
            --region $REGION \
            --project $PROJECT_ID \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID"

  # Frontend deployment to Firebase Hosting
  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        env:
          # Set production API URL - Firebase Hosting will rewrite /api/* to Cloud Run
          VITE_API_BASE_URL: ''  # Empty for production (uses rewrites)
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.GCP_SA_KEY }}
          channelId: live
          projectId: ${{ secrets.GCP_PROJECT_ID }}

  # Optional: Deploy Firestore rules
  deploy-firestore:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Firestore rules
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.GCP_SA_KEY }}
          projectId: ${{ secrets.GCP_PROJECT_ID }}
          # Only deploy rules and indexes
          args: '--only firestore:rules,firestore:indexes'

# Additional secrets you might need:
# FIREBASE_API_KEY
# FIREBASE_AUTH_DOMAIN  
# FIREBASE_STORAGE_BUCKET
# FIREBASE_MESSAGING_SENDER_ID
# FIREBASE_APP_ID
# GEMINI_API_KEY (for backend environment)